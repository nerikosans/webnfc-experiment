{"version":3,"sources":["components/Main.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Main","React","data","setData","log","line","s","a","navigator","permissions","query","name","result","state","window","reader","NDEFReader","scan","onreading","event","decoder","TextDecoder","message","records","record","recordType","mediaType","decode","onClick","App","className","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"uPAkDeA,EA9CmB,WAAO,IAAD,EACdC,WAAuB,IADT,mBAC/BC,EAD+B,KACzBC,EADyB,KAGhCC,EAAM,SAACC,GACXF,GAAQ,SAACG,GAAD,gBAAUA,EAAV,aAAgBD,OAJY,4CAOtC,4BAAAE,EAAA,sEACuBC,UAAUC,YAAYC,MAAM,CAC/CC,KAAM,gBAFV,OACQC,EADR,OAIER,EAAIQ,EAAOC,OAJb,4CAPsC,kEActC,4BAAAN,EAAA,2DACM,eAAgBO,QADtB,wBAGUC,EAAS,IAAIC,WAHvB,kBAKYD,EAAOE,OALnB,OAMMF,EAAOG,UAAY,SAACC,GAClB,IADiC,EAC3BC,EAAU,IAAIC,YADa,cAEZF,EAAMG,QAAQC,SAFF,IAEjC,2BAA4C,CAAC,IAAlCC,EAAiC,QAC1CpB,EAAI,iBAAmBoB,EAAOC,YAC9BrB,EAAI,iBAAmBoB,EAAOE,WAC9BtB,EAAI,iBAAmBgB,EAAQO,OAAOH,EAAOtB,QALd,gCANzC,gDAeME,EAAI,EAAD,IAfT,gCAkBIA,EAAI,6BAlBR,0DAdsC,sBAoCtC,OACE,qCAEE,kCAAUF,GACV,0BAAQ0B,QAxC0B,4CAwClC,kBACA,0BAAQA,QAzC0B,4CAyClC,UCjCSC,MARf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,QCKcC,QACW,cAA7BjB,OAAOkB,SAASC,UAEe,UAA7BnB,OAAOkB,SAASC,UAEhBnB,OAAOkB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmB/B,WACrBA,UAAUgC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMxB,a","file":"static/js/main.391d06b8.chunk.js","sourcesContent":["import * as React from 'react';\n\ninterface MainProps {}\n\nconst Main: React.FC<MainProps> = () => {\n  const [data, setData] = React.useState<string>('');\n\n  const log = (line: string) => {\n    setData((s) => `${s}\\n${line}`);\n  };\n\n  async function askPermission() {\n    const result = await navigator.permissions.query({\n      name: 'geolocation',\n    });\n    log(result.state);\n  }\n\n  async function readTag() {\n    if ('NDEFReader' in window) {\n      // @ts-ignore\n      const reader = new NDEFReader();\n      try {\n        await reader.scan();\n        reader.onreading = (event: any) => {\n          const decoder = new TextDecoder();\n          for (const record of event.message.records) {\n            log('Record type:  ' + record.recordType);\n            log('MIME type:    ' + record.mediaType);\n            log('=== data ===\\n' + decoder.decode(record.data));\n          }\n        };\n      } catch (error) {\n        log(error);\n      }\n    } else {\n      log('Web NFC is not supported.');\n    }\n  }\n\n  return (\n    <div>\n      Main nn\n      <p>data: {data}</p>\n      <button onClick={askPermission}>Ask permission</button>\n      <button onClick={readTag}>Read</button>\n    </div>\n  );\n};\n\nexport default Main;\n","import React from 'react';\nimport './App.css';\nimport Main from './components/Main';\n\nfunction App() {\n  return (\n    <div className='App'>\n      <Main />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}